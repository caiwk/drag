// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package server

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Server interface {
  GetMethods(ctx context.Context) (r []string, err error)
  ClearAllFaults(ctx context.Context) (err error)
  // Parameters:
  //  - Method
  ClearFault(ctx context.Context, method string) (err error)
  // Parameters:
  //  - Methods
  //  - Random
  //  - ErrNo
  //  - Probability
  //  - Regexp
  //  - KillCaller
  //  - DelayUs
  //  - AutoDelay
  SetFault(ctx context.Context, methods []string, random bool, err_no int32, probability int32, regexp string, kill_caller bool, delay_us int32, auto_delay bool) (err error)
  // Parameters:
  //  - Random
  //  - ErrNo
  //  - Probability
  //  - Regexp
  //  - KillCaller
  //  - DelayUs
  //  - AutoDelay
  SetAllFault(ctx context.Context, random bool, err_no int32, probability int32, regexp string, kill_caller bool, delay_us int32, auto_delay bool) (err error)
}

type ServerClient struct {
  c thrift.TClient
}

// Deprecated: Use NewServer instead
func NewServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServerClient {
  return &ServerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewServer instead
func NewServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServerClient {
  return &ServerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewServerClient(c thrift.TClient) *ServerClient {
  return &ServerClient{
    c: c,
  }
}

func (p *ServerClient) GetMethods(ctx context.Context) (r []string, err error) {
  var _args0 ServerGetMethodsArgs
  var _result1 ServerGetMethodsResult
  if err = p.c.Call(ctx, "get_methods", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

func (p *ServerClient) ClearAllFaults(ctx context.Context) (err error) {
  var _args2 ServerClearAllFaultsArgs
  var _result3 ServerClearAllFaultsResult
  if err = p.c.Call(ctx, "clear_all_faults", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Method
func (p *ServerClient) ClearFault(ctx context.Context, method string) (err error) {
  var _args4 ServerClearFaultArgs
  _args4.Method = method
  var _result5 ServerClearFaultResult
  if err = p.c.Call(ctx, "clear_fault", &_args4, &_result5); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Methods
//  - Random
//  - ErrNo
//  - Probability
//  - Regexp
//  - KillCaller
//  - DelayUs
//  - AutoDelay
func (p *ServerClient) SetFault(ctx context.Context, methods []string, random bool, err_no int32, probability int32, regexp string, kill_caller bool, delay_us int32, auto_delay bool) (err error) {
  var _args6 ServerSetFaultArgs
  _args6.Methods = methods
  _args6.Random = random
  _args6.ErrNo = err_no
  _args6.Probability = probability
  _args6.Regexp = regexp
  _args6.KillCaller = kill_caller
  _args6.DelayUs = delay_us
  _args6.AutoDelay = auto_delay
  var _result7 ServerSetFaultResult
  if err = p.c.Call(ctx, "set_fault", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Random
//  - ErrNo
//  - Probability
//  - Regexp
//  - KillCaller
//  - DelayUs
//  - AutoDelay
func (p *ServerClient) SetAllFault(ctx context.Context, random bool, err_no int32, probability int32, regexp string, kill_caller bool, delay_us int32, auto_delay bool) (err error) {
  var _args8 ServerSetAllFaultArgs
  _args8.Random = random
  _args8.ErrNo = err_no
  _args8.Probability = probability
  _args8.Regexp = regexp
  _args8.KillCaller = kill_caller
  _args8.DelayUs = delay_us
  _args8.AutoDelay = auto_delay
  var _result9 ServerSetAllFaultResult
  if err = p.c.Call(ctx, "set_all_fault", &_args8, &_result9); err != nil {
    return
  }
  return nil
}

type ServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Server
}

func (p *ServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewServerProcessor(handler Server) *ServerProcessor {

  self10 := &ServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["get_methods"] = &serverProcessorGetMethods{handler:handler}
  self10.processorMap["clear_all_faults"] = &serverProcessorClearAllFaults{handler:handler}
  self10.processorMap["clear_fault"] = &serverProcessorClearFault{handler:handler}
  self10.processorMap["set_fault"] = &serverProcessorSetFault{handler:handler}
  self10.processorMap["set_all_fault"] = &serverProcessorSetAllFault{handler:handler}
return self10
}

func (p *ServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x11

}

type serverProcessorGetMethods struct {
  handler Server
}

func (p *serverProcessorGetMethods) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerGetMethodsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_methods", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerGetMethodsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetMethods(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_methods: " + err2.Error())
    oprot.WriteMessageBegin("get_methods", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_methods", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorClearAllFaults struct {
  handler Server
}

func (p *serverProcessorClearAllFaults) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerClearAllFaultsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clear_all_faults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerClearAllFaultsResult{}
  var err2 error
  if err2 = p.handler.ClearAllFaults(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_all_faults: " + err2.Error())
    oprot.WriteMessageBegin("clear_all_faults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("clear_all_faults", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorClearFault struct {
  handler Server
}

func (p *serverProcessorClearFault) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerClearFaultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clear_fault", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerClearFaultResult{}
  var err2 error
  if err2 = p.handler.ClearFault(ctx, args.Method); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_fault: " + err2.Error())
    oprot.WriteMessageBegin("clear_fault", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("clear_fault", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorSetFault struct {
  handler Server
}

func (p *serverProcessorSetFault) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerSetFaultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_fault", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerSetFaultResult{}
  var err2 error
  if err2 = p.handler.SetFault(ctx, args.Methods, args.Random, args.ErrNo, args.Probability, args.Regexp, args.KillCaller, args.DelayUs, args.AutoDelay); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_fault: " + err2.Error())
    oprot.WriteMessageBegin("set_fault", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("set_fault", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorSetAllFault struct {
  handler Server
}

func (p *serverProcessorSetAllFault) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerSetAllFaultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_all_fault", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerSetAllFaultResult{}
  var err2 error
  if err2 = p.handler.SetAllFault(ctx, args.Random, args.ErrNo, args.Probability, args.Regexp, args.KillCaller, args.DelayUs, args.AutoDelay); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_all_fault: " + err2.Error())
    oprot.WriteMessageBegin("set_all_fault", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("set_all_fault", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type ServerGetMethodsArgs struct {
}

func NewServerGetMethodsArgs() *ServerGetMethodsArgs {
  return &ServerGetMethodsArgs{}
}

func (p *ServerGetMethodsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerGetMethodsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_methods_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerGetMethodsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerGetMethodsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerGetMethodsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerGetMethodsResult() *ServerGetMethodsResult {
  return &ServerGetMethodsResult{}
}

var ServerGetMethodsResult_Success_DEFAULT []string

func (p *ServerGetMethodsResult) GetSuccess() []string {
  return p.Success
}
func (p *ServerGetMethodsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerGetMethodsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerGetMethodsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Success = append(p.Success, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ServerGetMethodsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_methods_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerGetMethodsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerGetMethodsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerGetMethodsResult(%+v)", *p)
}

type ServerClearAllFaultsArgs struct {
}

func NewServerClearAllFaultsArgs() *ServerClearAllFaultsArgs {
  return &ServerClearAllFaultsArgs{}
}

func (p *ServerClearAllFaultsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerClearAllFaultsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_all_faults_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerClearAllFaultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerClearAllFaultsArgs(%+v)", *p)
}

type ServerClearAllFaultsResult struct {
}

func NewServerClearAllFaultsResult() *ServerClearAllFaultsResult {
  return &ServerClearAllFaultsResult{}
}

func (p *ServerClearAllFaultsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerClearAllFaultsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_all_faults_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerClearAllFaultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerClearAllFaultsResult(%+v)", *p)
}

// Attributes:
//  - Method
type ServerClearFaultArgs struct {
  Method string
}

func NewServerClearFaultArgs() *ServerClearFaultArgs {
  return &ServerClearFaultArgs{}
}


func (p *ServerClearFaultArgs) GetMethod() string {
  return p.Method
}
func (p *ServerClearFaultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField_1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerClearFaultArgs)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *ServerClearFaultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_fault_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerClearFaultArgs) writeField_1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.STRING, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:method: ", p), err) }
  if err := oprot.WriteString(string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (-1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:method: ", p), err) }
  return err
}

func (p *ServerClearFaultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerClearFaultArgs(%+v)", *p)
}

type ServerClearFaultResult struct {
}

func NewServerClearFaultResult() *ServerClearFaultResult {
  return &ServerClearFaultResult{}
}

func (p *ServerClearFaultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerClearFaultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clear_fault_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerClearFaultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerClearFaultResult(%+v)", *p)
}

// Attributes:
//  - Methods
//  - Random
//  - ErrNo
//  - Probability
//  - Regexp
//  - KillCaller
//  - DelayUs
//  - AutoDelay
type ServerSetFaultArgs struct {
  Methods []string
  Random bool
  ErrNo int32
  Probability int32
  Regexp string
  KillCaller bool
  DelayUs int32
  AutoDelay bool
}

func NewServerSetFaultArgs() *ServerSetFaultArgs {
  return &ServerSetFaultArgs{}
}


func (p *ServerSetFaultArgs) GetMethods() []string {
  return p.Methods
}

func (p *ServerSetFaultArgs) GetRandom() bool {
  return p.Random
}

func (p *ServerSetFaultArgs) GetErrNo() int32 {
  return p.ErrNo
}

func (p *ServerSetFaultArgs) GetProbability() int32 {
  return p.Probability
}

func (p *ServerSetFaultArgs) GetRegexp() string {
  return p.Regexp
}

func (p *ServerSetFaultArgs) GetKillCaller() bool {
  return p.KillCaller
}

func (p *ServerSetFaultArgs) GetDelayUs() int32 {
  return p.DelayUs
}

func (p *ServerSetFaultArgs) GetAutoDelay() bool {
  return p.AutoDelay
}
func (p *ServerSetFaultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField_1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField_2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField_5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField_6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField_8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Methods =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Methods = append(p.Methods, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.Random = v
}
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.ErrNo = v
}
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.Probability = v
}
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.Regexp = v
}
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.KillCaller = v
}
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -7: ", err)
} else {
  p.DelayUs = v
}
  return nil
}

func (p *ServerSetFaultArgs)  ReadField_8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field -8: ", err)
} else {
  p.AutoDelay = v
}
  return nil
}

func (p *ServerSetFaultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_fault_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSetFaultArgs) writeField_8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("auto_delay", thrift.BOOL, -8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:auto_delay: ", p), err) }
  if err := oprot.WriteBool(bool(p.AutoDelay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.auto_delay (-8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -8:auto_delay: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delay_us", thrift.I32, -7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:delay_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.DelayUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delay_us (-7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -7:delay_us: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kill_caller", thrift.BOOL, -6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:kill_caller: ", p), err) }
  if err := oprot.WriteBool(bool(p.KillCaller)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kill_caller (-6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -6:kill_caller: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regexp", thrift.STRING, -5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:regexp: ", p), err) }
  if err := oprot.WriteString(string(p.Regexp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regexp (-5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -5:regexp: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("probability", thrift.I32, -4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:probability: ", p), err) }
  if err := oprot.WriteI32(int32(p.Probability)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.probability (-4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -4:probability: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_no", thrift.I32, -3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:err_no: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_no (-3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -3:err_no: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("random", thrift.BOOL, -2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:random: ", p), err) }
  if err := oprot.WriteBool(bool(p.Random)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.random (-2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -2:random: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) writeField_1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("methods", thrift.LIST, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:methods: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Methods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Methods {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:methods: ", p), err) }
  return err
}

func (p *ServerSetFaultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSetFaultArgs(%+v)", *p)
}

type ServerSetFaultResult struct {
}

func NewServerSetFaultResult() *ServerSetFaultResult {
  return &ServerSetFaultResult{}
}

func (p *ServerSetFaultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSetFaultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_fault_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSetFaultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSetFaultResult(%+v)", *p)
}

// Attributes:
//  - Random
//  - ErrNo
//  - Probability
//  - Regexp
//  - KillCaller
//  - DelayUs
//  - AutoDelay
type ServerSetAllFaultArgs struct {
  Random bool
  ErrNo int32
  Probability int32
  Regexp string
  KillCaller bool
  DelayUs int32
  AutoDelay bool
}

func NewServerSetAllFaultArgs() *ServerSetAllFaultArgs {
  return &ServerSetAllFaultArgs{}
}


func (p *ServerSetAllFaultArgs) GetRandom() bool {
  return p.Random
}

func (p *ServerSetAllFaultArgs) GetErrNo() int32 {
  return p.ErrNo
}

func (p *ServerSetAllFaultArgs) GetProbability() int32 {
  return p.Probability
}

func (p *ServerSetAllFaultArgs) GetRegexp() string {
  return p.Regexp
}

func (p *ServerSetAllFaultArgs) GetKillCaller() bool {
  return p.KillCaller
}

func (p *ServerSetAllFaultArgs) GetDelayUs() int32 {
  return p.DelayUs
}

func (p *ServerSetAllFaultArgs) GetAutoDelay() bool {
  return p.AutoDelay
}
func (p *ServerSetAllFaultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField_1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField_4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField_5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField_7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.Random = v
}
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.ErrNo = v
}
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.Probability = v
}
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.Regexp = v
}
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.KillCaller = v
}
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.DelayUs = v
}
  return nil
}

func (p *ServerSetAllFaultArgs)  ReadField_7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field -7: ", err)
} else {
  p.AutoDelay = v
}
  return nil
}

func (p *ServerSetAllFaultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_all_fault_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSetAllFaultArgs) writeField_7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("auto_delay", thrift.BOOL, -7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:auto_delay: ", p), err) }
  if err := oprot.WriteBool(bool(p.AutoDelay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.auto_delay (-7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -7:auto_delay: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) writeField_6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delay_us", thrift.I32, -6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:delay_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.DelayUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delay_us (-6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -6:delay_us: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) writeField_5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kill_caller", thrift.BOOL, -5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:kill_caller: ", p), err) }
  if err := oprot.WriteBool(bool(p.KillCaller)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kill_caller (-5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -5:kill_caller: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) writeField_4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regexp", thrift.STRING, -4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:regexp: ", p), err) }
  if err := oprot.WriteString(string(p.Regexp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regexp (-4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -4:regexp: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) writeField_3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("probability", thrift.I32, -3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:probability: ", p), err) }
  if err := oprot.WriteI32(int32(p.Probability)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.probability (-3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -3:probability: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) writeField_2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_no", thrift.I32, -2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:err_no: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_no (-2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -2:err_no: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) writeField_1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("random", thrift.BOOL, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:random: ", p), err) }
  if err := oprot.WriteBool(bool(p.Random)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.random (-1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:random: ", p), err) }
  return err
}

func (p *ServerSetAllFaultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSetAllFaultArgs(%+v)", *p)
}

type ServerSetAllFaultResult struct {
}

func NewServerSetAllFaultResult() *ServerSetAllFaultResult {
  return &ServerSetAllFaultResult{}
}

func (p *ServerSetAllFaultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSetAllFaultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_all_fault_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSetAllFaultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSetAllFaultResult(%+v)", *p)
}


