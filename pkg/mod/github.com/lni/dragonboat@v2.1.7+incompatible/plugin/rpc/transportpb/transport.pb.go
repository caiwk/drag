// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport.proto

package transportpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import raftpb "github.com/lni/dragonboat/raftpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransportClient interface {
	RaftMessage(ctx context.Context, opts ...grpc.CallOption) (Transport_RaftMessageClient, error)
	RaftSnapshot(ctx context.Context, opts ...grpc.CallOption) (Transport_RaftSnapshotClient, error)
}

type transportClient struct {
	cc *grpc.ClientConn
}

func NewTransportClient(cc *grpc.ClientConn) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) RaftMessage(ctx context.Context, opts ...grpc.CallOption) (Transport_RaftMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[0], "/transportpb.Transport/RaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportRaftMessageClient{stream}
	return x, nil
}

type Transport_RaftMessageClient interface {
	Send(*raftpb.MessageBatch) error
	Recv() (*raftpb.Response, error)
	grpc.ClientStream
}

type transportRaftMessageClient struct {
	grpc.ClientStream
}

func (x *transportRaftMessageClient) Send(m *raftpb.MessageBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportRaftMessageClient) Recv() (*raftpb.Response, error) {
	m := new(raftpb.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) RaftSnapshot(ctx context.Context, opts ...grpc.CallOption) (Transport_RaftSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[1], "/transportpb.Transport/RaftSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportRaftSnapshotClient{stream}
	return x, nil
}

type Transport_RaftSnapshotClient interface {
	Send(*raftpb.SnapshotChunk) error
	Recv() (*raftpb.Response, error)
	grpc.ClientStream
}

type transportRaftSnapshotClient struct {
	grpc.ClientStream
}

func (x *transportRaftSnapshotClient) Send(m *raftpb.SnapshotChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportRaftSnapshotClient) Recv() (*raftpb.Response, error) {
	m := new(raftpb.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransportServer is the server API for Transport service.
type TransportServer interface {
	RaftMessage(Transport_RaftMessageServer) error
	RaftSnapshot(Transport_RaftSnapshotServer) error
}

func RegisterTransportServer(s *grpc.Server, srv TransportServer) {
	s.RegisterService(&_Transport_serviceDesc, srv)
}

func _Transport_RaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).RaftMessage(&transportRaftMessageServer{stream})
}

type Transport_RaftMessageServer interface {
	Send(*raftpb.Response) error
	Recv() (*raftpb.MessageBatch, error)
	grpc.ServerStream
}

type transportRaftMessageServer struct {
	grpc.ServerStream
}

func (x *transportRaftMessageServer) Send(m *raftpb.Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportRaftMessageServer) Recv() (*raftpb.MessageBatch, error) {
	m := new(raftpb.MessageBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_RaftSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).RaftSnapshot(&transportRaftSnapshotServer{stream})
}

type Transport_RaftSnapshotServer interface {
	Send(*raftpb.Response) error
	Recv() (*raftpb.SnapshotChunk, error)
	grpc.ServerStream
}

type transportRaftSnapshotServer struct {
	grpc.ServerStream
}

func (x *transportRaftSnapshotServer) Send(m *raftpb.Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportRaftSnapshotServer) Recv() (*raftpb.SnapshotChunk, error) {
	m := new(raftpb.SnapshotChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transportpb.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessage",
			Handler:       _Transport_RaftMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RaftSnapshot",
			Handler:       _Transport_RaftSnapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}

func init() { proto.RegisterFile("transport.proto", fileDescriptor_transport_001c0ef2c89206ad) }

var fileDescriptor_transport_001c0ef2c89206ad = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xcb, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0xc6, 0x71, 0x3b, 0x9a, 0x0a, 0x4a, 0xd0, 0xa5, 0xa3, 0x93, 0x20, 0xa4, 0xe2, 0x2a, 0x2e,
	0x3a, 0xbb, 0x54, 0x5f, 0xe0, 0x52, 0xd3, 0xa6, 0xa8, 0xb9, 0x23, 0x77, 0x7d, 0x06, 0x5f, 0x5b,
	0xb4, 0xc6, 0xcd, 0xe9, 0x83, 0x3f, 0xdf, 0x4f, 0x4d, 0x25, 0x42, 0x60, 0xc2, 0x28, 0x86, 0x22,
	0x0a, 0xea, 0xfc, 0x17, 0xc8, 0x16, 0xeb, 0xb6, 0x13, 0xdf, 0x5b, 0x53, 0xe3, 0xa3, 0xbc, 0x87,
	0xae, 0xbc, 0x46, 0x68, 0x31, 0x58, 0x04, 0x29, 0x23, 0x34, 0x42, 0xf6, 0x33, 0x83, 0xdc, 0x3e,
	0x33, 0x35, 0xbe, 0x24, 0xac, 0x77, 0x2a, 0xaf, 0xa0, 0x91, 0x93, 0x63, 0x86, 0xd6, 0xe9, 0xb9,
	0x19, 0x80, 0xf9, 0x86, 0x03, 0x48, 0xed, 0x8b, 0x59, 0xaa, 0x95, 0x63, 0xc2, 0xc0, 0x6e, 0x39,
	0x5a, 0x65, 0x9b, 0x4c, 0xef, 0xd5, 0xe4, 0x8d, 0xcf, 0x01, 0x88, 0x3d, 0x8a, 0x5e, 0xa4, 0x5f,
	0x2a, 0x47, 0xdf, 0x87, 0xdb, 0x3f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x82, 0xb8, 0x33,
	0xd5, 0x00, 0x00, 0x00,
}
